// <auto-generated />
using System;
using MainTainSenseAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MainTainSenseAPI.Migrations
{
    [DbContext(typeof(MainTainSenseDataContext))]
    partial class MainTainSenseDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("MainTainSenseAPI.Models.Accesslevel", b =>
                {
                    b.Property<int>("AccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("accesslevelid");

                    b.Property<string>("Accesslevelname")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("accesslevelname");

                    b.HasKey("AccessLevelId");

                    b.ToTable("accesslevels", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("assetid");

                    b.Property<string>("AssetDescription")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("assetdescription");

                    b.Property<int?>("AssetLocationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assetlocationid");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text(100)")
                        .HasColumnName("assetname");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assettypeid");

                    b.Property<int>("Assetstatus")
                        .HasColumnType("text(50)")
                        .HasColumnName("assetstatus");

                    b.Property<string>("InstallDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("installdate");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Serialnumber")
                        .HasMaxLength(50)
                        .HasColumnType("text(50)")
                        .HasColumnName("serialnumber");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.HasKey("AssetId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("LocationId");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.AssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("assettypeid");

                    b.Property<int>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("AssetTypeDescription")
                        .HasColumnType("TEXT")
                        .HasColumnName("assettypedescription");

                    b.Property<string>("AssetTypeName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("assettypename");

                    b.Property<int>("IsMachine")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ismachine");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.HasKey("AssetTypeId");

                    b.ToTable("assettypes", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("buildingid");

                    b.Property<string>("BuildingDescription")
                        .HasColumnType("text(255)")
                        .HasColumnName("buildingdescription");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("text(100)")
                        .HasColumnName("buildingname");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isactive");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.HasKey("BuildingId");

                    b.ToTable("buildings", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("categoryid");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("categorydescription");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isactive");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.HasKey("CategoryId");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Checklist", b =>
                {
                    b.Property<int>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("checklistid");

                    b.Property<string>("ChecklistName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("checklistname");

                    b.Property<int?>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isactive");

                    b.HasKey("ChecklistId");

                    b.ToTable("checklists", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.ChecklistItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("itemid");

                    b.Property<int?>("ChecklistId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("checklistid");

                    b.Property<string>("ChecklistItemsDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("checklistitemsdescription");

                    b.Property<int?>("IsCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iscompleted");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortorder");

                    b.HasKey("ItemId");

                    b.HasIndex("ChecklistId");

                    b.ToTable("checklistitems", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("departmentid");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("departmentname");

                    b.Property<int?>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isactive");

                    b.HasKey("DepartmentId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Frequency", b =>
                {
                    b.Property<int>("FrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("frequencyid");

                    b.Property<int?>("DayofMonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dayofmonth");

                    b.Property<string>("Dayofweek")
                        .HasColumnType("TEXT")
                        .HasColumnName("dayofweek");

                    b.Property<string>("FrequencyDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("frequencydescription");

                    b.Property<string>("FrequencyMonth")
                        .HasColumnType("TEXT")
                        .HasColumnName("frequencymonth");

                    b.Property<int?>("IntervalValue")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("intervalvalue");

                    b.Property<int?>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isactive");

                    b.Property<string>("TimeUnit")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("timeunit");

                    b.HasKey("FrequencyId");

                    b.ToTable("frequency", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("locationid");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("buildingid");

                    b.Property<double?>("IsActive")
                        .HasColumnType("REAL")
                        .HasColumnName("isactive");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("locationdescription");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text(100)")
                        .HasColumnName("locationname");

                    b.Property<string>("LocationPath")
                        .HasColumnType("text(255)")
                        .HasColumnName("locationpath");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parentlocationid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.HasKey("LocationId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ParentLocationId");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Message", b =>
                {
                    b.Property<int>("MessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("messagesid");

                    b.Property<string>("CreationTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("creationtime");

                    b.Property<int?>("IsDeletedForRecipient")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isdeletedforrecipient");

                    b.Property<int?>("IsDeletedForSender")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isdeletedforsender");

                    b.Property<int?>("IsRead")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isread");

                    b.Property<string>("MessageText")
                        .HasColumnType("TEXT")
                        .HasColumnName("messagetext");

                    b.Property<int?>("ParenttMessageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parenttmessageid");

                    b.Property<int?>("RecipientId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("recipientid");

                    b.Property<int?>("SenderId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("senderid");

                    b.Property<string>("Subject")
                        .HasColumnType("text(50)")
                        .HasColumnName("subject");

                    b.HasKey("MessagesId");

                    b.HasIndex("ParenttMessageId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("permissionid");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("permissionname");

                    b.Property<string>("PermissionsDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("permissionsdescription");

                    b.HasKey("PermissionId");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.PmChecklist", b =>
                {
                    b.Property<int>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("checklistid");

                    b.Property<int?>("PmId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pmid");

                    b.HasKey("ChecklistId");

                    b.HasIndex("PmId");

                    b.ToTable("pmchecklists", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.PmTemplate", b =>
                {
                    b.Property<int?>("AssetTypeId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("assettypeid");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("PmTemplateDescription")
                        .HasColumnType("TEXT")
                        .HasColumnName("pmtemplatedescription");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("templateid");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("templatename");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("pmtemplates", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.PreventiveMaintenance", b =>
                {
                    b.Property<int>("PmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pmid");

                    b.Property<int?>("AssetId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("assetid");

                    b.Property<int?>("FrequencyId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("frequencyid");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("LastCompletedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("lastcompleteddate");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<string>("NextDueDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nextduedate");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("PmDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("pmdescription");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.HasKey("PmId");

                    b.ToTable("preventivemaintenance", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("priorityid");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text(7)")
                        .HasColumnName("colorcode");

                    b.Property<int?>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("prioritylevel");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("text(20)")
                        .HasColumnName("priorityname");

                    b.HasKey("PriorityId");

                    b.ToTable("priorities", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("roleid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("rolename");

                    b.HasKey("RoleId");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.RolePermission", b =>
                {
                    b.Property<int?>("PermissionId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("permissionid");

                    b.Property<int?>("RoleId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("roleid");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("rolepermissions", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("statusid");

                    b.Property<int?>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isactive");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("TEXT")
                        .HasColumnName("statusdescription");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text(20)")
                        .HasColumnName("statusname");

                    b.HasKey("StatusId");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("teamid");

                    b.Property<string>("Department")
                        .HasColumnType("text(50)")
                        .HasColumnName("department");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("teamname");

                    b.HasKey("TeamId");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.TeamMember", b =>
                {
                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("teamid");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userid");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("teammembers", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.TemplateTask", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("templateid");

                    b.Property<int?>("ChecklistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("checklistid");

                    b.Property<int?>("FrequencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("frequencyid");

                    b.Property<string>("TemplateTasksDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("templatetasksdescription");

                    b.HasKey("TemplateId");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("FrequencyId");

                    b.ToTable("templatetasks", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("userid");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("departmentid");

                    b.Property<string>("Email")
                        .HasColumnType("text(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("firstname");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastlogin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.UserRole", b =>
                {
                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("roleid");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("userid");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("userroles", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("workorderid");

                    b.Property<int?>("AssetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assetid");

                    b.Property<int?>("AssignedTeamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assignedteamid");

                    b.Property<string>("CompletionDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("completiondate");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("createddate");

                    b.Property<string>("DueDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("duedate");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastupdate");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("priorityid");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("requestedby");

                    b.Property<string>("ScheduledDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("scheduleddate");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("statusid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text(50)")
                        .HasColumnName("updatedby");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userid");

                    b.Property<string>("WorkOrderDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("workorderdescription");

                    b.HasKey("WorkOrderId");

                    b.HasIndex("AssetId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("workorders", (string)null);
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Asset", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainTainSenseAPI.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("AssetType");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.ChecklistItem", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Checklist", "Checklist")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Location", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Building", "Building")
                        .WithMany("Locations")
                        .HasForeignKey("BuildingId");

                    b.HasOne("MainTainSenseAPI.Models.Location", "ParentLocation")
                        .WithMany("ChildLocations")
                        .HasForeignKey("ParentLocationId");

                    b.Navigation("Building");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Message", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Message", "ParenttMessage")
                        .WithMany("InverseParenttMessage")
                        .HasForeignKey("ParenttMessageId");

                    b.HasOne("MainTainSenseAPI.Models.User", "Recipient")
                        .WithMany("MessageRecipients")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainTainSenseAPI.Models.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParenttMessage");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.PmChecklist", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.PreventiveMaintenance", "Pm")
                        .WithMany("PmChecklists")
                        .HasForeignKey("PmId");

                    b.Navigation("Pm");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.PmTemplate", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.RolePermission", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainTainSenseAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.TeamMember", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("MainTainSenseAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.TemplateTask", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Checklist", "Checklist")
                        .WithMany("TemplateTasks")
                        .HasForeignKey("ChecklistId");

                    b.HasOne("MainTainSenseAPI.Models.Frequency", "Frequency")
                        .WithMany("TemplateTasks")
                        .HasForeignKey("FrequencyId");

                    b.Navigation("Checklist");

                    b.Navigation("Frequency");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.UserRole", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("MainTainSenseAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.WorkOrder", b =>
                {
                    b.HasOne("MainTainSenseAPI.Models.Asset", "Asset")
                        .WithMany("WorkOrders")
                        .HasForeignKey("AssetId");

                    b.HasOne("MainTainSenseAPI.Models.Priority", "Priority")
                        .WithMany("Workorders")
                        .HasForeignKey("PriorityId");

                    b.HasOne("MainTainSenseAPI.Models.Status", "Status")
                        .WithMany("Workorders")
                        .HasForeignKey("StatusId");

                    b.Navigation("Asset");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Asset", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Building", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Checklist", b =>
                {
                    b.Navigation("ChecklistItems");

                    b.Navigation("TemplateTasks");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Frequency", b =>
                {
                    b.Navigation("TemplateTasks");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Location", b =>
                {
                    b.Navigation("ChildLocations");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Message", b =>
                {
                    b.Navigation("InverseParenttMessage");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.PreventiveMaintenance", b =>
                {
                    b.Navigation("PmChecklists");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Priority", b =>
                {
                    b.Navigation("Workorders");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.Status", b =>
                {
                    b.Navigation("Workorders");
                });

            modelBuilder.Entity("MainTainSenseAPI.Models.User", b =>
                {
                    b.Navigation("MessageRecipients");

                    b.Navigation("MessageSenders");
                });
#pragma warning restore 612, 618
        }
    }
}
